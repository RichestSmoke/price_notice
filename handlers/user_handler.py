from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from keyboards.user_kb import (
    main_kb, 
    cancel_kb, 
    del_order_kb, 
    monitoring_kb,
    )
from utils.states import (
    NewNoticeState, 
    DeleteNoticeState,
    ConficTradeState
)
from utils.validation import check_input_notice_data, string_to_list
from utils.mongodb import (
    update_data_on_db,
    show_data_in_db,
    remove_object_from_coin,
    remove_data_for_coin,
    clear_entire_collection 
    )
from trading_bot import (
    ticker_list,
    list_working_orders,
    last_order,
    trading_cnfg
)
import json


router = Router()
ADMIN = 425136998


@router.message(CommandStart())
async def send_welcom(message: Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}!\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ü–µ–Ω –Ω–∞ Binance Futures.\n"
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É @seventeene",
        reply_markup=main_kb
    )


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_kb)


@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä")
async def new_notice(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN:
        await state.set_state(NewNoticeState.enter_data)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "‚ùóÔ∏è–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ –∑–Ω–∞–∫–æ–º .\n"
            "‚ùóÔ∏è–û—Ä–¥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞–∫–æ–º ,\n"
            "BTC-35000.00-S\n"
            "BTC-35000.00-S,BTC-2400.5-B",
            reply_markup=cancel_kb
        )
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", reply_markup=main_kb)
    


@router.message(NewNoticeState.enter_data)
async def writing_new_notice(message: Message, state: FSMContext):
    text_data_orders = string_to_list(message.text)
    new_orders_list = []
    message_text = "–ü—Ä–∏–Ω—è—Ç–æ!\n"
    for order in text_data_orders:
        if check_input_notice_data(order):
            order_split = order.split('-')
            order_data = {
                'coin' : f"{order_split[0].upper()}USDT",
                'price' : float(order_split[1]),
                'action' : 'BUY' if order_split[2].upper() in ('B', 'BUY') else 'SELL'
            }
            new_orders_list.append(order_data)
            message_text += f"{order_data['coin']} -- ${order_data['price']}  {order_data['action']}\n"
        
        else:
            await message.answer(
            "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            f"–ò—Ç–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–ª–∞—Å—å –Ω–∞ —ç—Ç–æ–π —á–∞—Å—Ç–∏: {order}\n"
            "‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –Ω—É–∂–Ω–æ –≤–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ USDT\n"
            "‚ùóÔ∏è–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º —Å–æ –∑–Ω–∞–∫–æ–º .\n"
            "‚ùóÔ∏è–î–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ B - buy –∏–ª–∏ S - short\n"
            "‚ùóÔ∏è–ú–µ–∂–¥—É –º–æ–Ω–µ—Ç–æ–π, —Ü–µ–Ω–æ–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –∑–Ω–∞–∫ '-'\n"
            "‚ùóÔ∏è–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª–æ–≤"
        )
            return

    list_working_orders.extend(new_orders_list)
    result_update_db = await update_data_on_db(new_orders_list)
    message_text += f"db_result:\n{result_update_db}"
    await state.clear()
    await message.reply(message_text, reply_markup=main_kb)



@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ä–¥–µ—Ä—ã")
async def show_notice(message: Message):
    notice_data = await show_data_in_db()
    answer_text = ""
    for order in notice_data:
        try:
            delta_precent = ((order['price'] - ticker_list[order['coin']]) / ticker_list[order['coin']]) * 100
            answer_text += (
                f"{order['coin']} -- ${order['price']} {'‚¨á' if order['action'] == 'SELL' else '‚¨Ü'} "
                f"{'üî¥' if abs(delta_precent) <= 1 else ('üü†' if 1 < abs(delta_precent) < 7 else 'üü¢')} {round((delta_precent), 1)}%\n"
            )
        except:
            answer_text += f"{order['coin']}  --  –Ω–µ—Ç —Ç–∞–∫–æ–π –º–æ–Ω–µ—Ç—ã!"
    answer_text += f"–í—Å–µ–≥–æ {len(notice_data)} –æ—Ä–¥–µ—Ä–æ–≤"
    await message.answer(answer_text)


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä—ã")
async def del_notice(message: Message, state: FSMContext):
    if message.from_user.id == ADMIN:
        await state.set_state(DeleteNoticeState.start_del)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=del_order_kb)
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", reply_markup=main_kb)



@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –æ—Ä–¥–µ—Ä")
async def del_order_handler(message: Message, state: FSMContext):
    if await state.get_state() == DeleteNoticeState.start_del.state:
        await state. set_state(DeleteNoticeState.order_del)
        message_text = "list_working_orders:\n"
        for order in list_working_orders:
            message_text += f"{order['coin'][:-4]}-{order['price']}-{order['action']}\n"
        message_text += f"–í—Å–µ–≥–æ {len(list_working_orders)} –æ—Ä–¥–µ—Ä–æ–≤"
        await message.answer(message_text)
        await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ä–¥–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "BTC-35000.00-S",
        reply_markup=cancel_kb
    )
        

@router.message(DeleteNoticeState.order_del)
async def feel_del_order_handler(message: Message, state: FSMContext):
    if check_input_notice_data(message.text):
        data = message.text.split("-")
        del_notice_data = {
            'coin' : f"{data[0].upper()}USDT",
            'price' : float(data[1]),
            'action' : 'BUY' if data[2].upper() in ('B', 'BUY') else 'SELL'
        }
        result_update = await remove_object_from_coin(
            del_notice_data['coin'],
            del_notice_data['price'],
            del_notice_data['action']
        )
        list_working_orders.remove(del_notice_data)
        await state.clear()
        await message.reply(
            "–£–¥–∞–ª–µ–Ω–æ!\n"
            f"coin = {del_notice_data['coin']}, price = {del_notice_data['price']}, "
            f"action = {del_notice_data['action']}, db={result_update}",
            reply_markup=main_kb
        )

    else:
        await message.answer(
            "–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –Ω—É–∂–Ω–æ –≤–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ USDT\n"
            "‚ùóÔ∏è–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º —á–∏—Å–ª–æ–º —Å–æ –∑–Ω–∞–∫–æ–º .\n"
            "‚ùóÔ∏è–î–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ B - buy –∏–ª–∏ S - short\n"
            "‚ùóÔ∏è–ú–µ–∂–¥—É –º–æ–Ω–µ—Ç–æ–π, —Ü–µ–Ω–æ–π –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –∑–Ω–∞–∫ '-'\n"
        )


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –º–æ–Ω–µ—Ç—É")
async def del_coin_handler(message: Message, state: FSMContext) -> None:
    if await state.get_state() == DeleteNoticeState.start_del.state:
        await state. set_state(DeleteNoticeState.coin_del)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å",
            reply_markup=cancel_kb
        )


@router.message(DeleteNoticeState.coin_del)
async def del_coin_handler(message: Message, state: FSMContext) -> None:
    coin = message.text.upper()
    message_text = ""
    order_count = 0
    if not coin.endswith('USDT'):
        coin += 'USDT'
    orders_copy = list(list_working_orders)
    for order in orders_copy:
        if coin == order['coin']:
            message_text += f"{order['coin']}-{order['price']}-{order['action']}\n"
            order_count += 1
            list_working_orders.remove(order)
    result_db = await remove_data_for_coin(coin)
    message_text += f"–í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ {order_count} –æ—Ä–¥–µ—Ä–æ–≤, db={result_db}"
    await state.clear()
    await message.answer(
        message_text,
        reply_markup=main_kb
    )


@router.message(F.text == "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞")
async def del_coin_handler(message: Message, state: FSMContext) -> None:
    if await state.get_state() == DeleteNoticeState.start_del.state:
        await state. set_state(DeleteNoticeState.db_del)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ ¬´–ü–û–î–¢–í–ï–†–î–ò–¢–¨¬ª –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞",
            reply_markup=cancel_kb
        )


@router.message(DeleteNoticeState.db_del)
async def del_coin_handler(message: Message, state: FSMContext) -> None:
    list_working_orders.clear()
    result_db = await clear_entire_collection()
    await state.clear()
    await message.answer(
        f"–í—Å–µ –æ—Ä–¥–µ—Ä–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã, db={result_db}",
        reply_markup=main_kb
    )


@router.message(F.text == "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
async def monitoring_handler(message: Message) -> None:
    await message.answer("–ß—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å?", reply_markup=monitoring_kb)


@router.message(F.text == "BinanceWebsocketMarkPrice")
async def monitoring_handler(message: Message):
    await message.answer(
        f"BTCUSDT - ${ticker_list.get('BTCUSDT')}\n"
        f"ETHUSDT - ${ticker_list.get('ETHUSDT')}\n"
        f"SOLUSDT - ${ticker_list.get('SOLUSDT')}",
        reply_markup=monitoring_kb
    )


@router.message(F.text == "BinanceWebsocketUserData")
async def monitoring_handler(message: Message) -> None:
    if last_order:
        await message.answer(
            f"pair: {last_order['pair']}\n"
            f"side: {last_order['side']}\n"
            f"average_price: {last_order['average_price']}\n"
            f"order_status: {last_order['order_status']}\n"
            f"realized_profit_of_the_trade: {last_order['realized_profit_of_the_trade']}",
            reply_markup=monitoring_kb
        )
    else:
        await message.answer(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=monitoring_kb
        )


@router.message(F.text == "Config")
async def config_handler(message: Message, state: FSMContext) -> None:
    if message.from_user.id == ADMIN:
        await state.set_state(ConficTradeState.start)
        await message.answer(
            f"\"breakout_strategy\" : {trading_cnfg.is_breakout_strategy_enabled},\n"
            f"\"order_market\" : {trading_cnfg.order_market},\n"
            f"\"position_size\" : {trading_cnfg.position_size_in_dollars},\n"
            f"\"take_price\" : {trading_cnfg.take_price_percentage},\n"
            f"\"stop_price\" : {trading_cnfg.stop_price_percentage},\n"
            f"\"trailing_stop\" : {trading_cnfg.trailing_stop_percent}\n",
            reply_markup=cancel_kb
        )


@router.message(ConficTradeState.start)
async def recive_config_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    data_string: str = message.text
    data_string = '{' + data_string + '}'
    try:
        cleaned_data_string = data_string.replace('\n', '')
        data_dict = json.loads(cleaned_data_string)
        with open('config.json', 'w') as json_file:
            json.dump(data_dict, json_file)

        trading_cnfg.is_breakout_strategy_enabled = data_dict['breakout_strategy']
        trading_cnfg.order_market = data_dict['order_market']
        trading_cnfg.position_size_in_dollars = data_dict['position_size']
        trading_cnfg.take_price_percentage = data_dict['take_price']
        trading_cnfg.stop_price_percentage = data_dict['stop_price']
        trading_cnfg.trailing_stop_percent = data_dict['trailing_stop']
        await message.reply("–ü—Ä–∏–Ω—è—Ç–æ!", reply_markup=main_kb)

    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞: {str(e)}"
        await message.reply(error_message, reply_markup=main_kb)

